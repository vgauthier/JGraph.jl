var documenterSearchIndex = {"docs":
[{"location":"#JGraph.jl-1","page":"Home","title":"JGraph.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [JGraph]","category":"page"},{"location":"#JGraph.Graph-Tuple{Any,Any}","page":"Home","title":"JGraph.Graph","text":"Graph(n, m)\n\ngenerate a graph with n vertices and m edges. Return a graph G.\n\n\n\n\n\n","category":"method"},{"location":"#JGraph.add_edge!-Union{Tuple{T}, Tuple{AbstractGraph,T,T}} where T<:Integer","page":"Home","title":"JGraph.add_edge!","text":"add_edge(G::AbstractGraph, u::T, v::T)\n\nAdd the egde(u,v) in the graph G. Return False is the edge already exit, true otherwise.\n\n\n\n\n\n","category":"method"},{"location":"#JGraph.add_vertex!-Union{Tuple{T}, Tuple{AbstractGraph,T}} where T<:Integer","page":"Home","title":"JGraph.add_vertex!","text":"add_edge(G::AbstractGraph, num_vertex)\n\nAdd \"num_vertex\" vertices to the graph G.\n\n\n\n\n\n","category":"method"},{"location":"#JGraph.degree-Tuple{Graph}","page":"Home","title":"JGraph.degree","text":"degree(G::Graph)\n\nReturn the list of nodes degree.\n\n\n\n\n\n","category":"method"},{"location":"#JGraph.has_edge-Union{Tuple{T}, Tuple{AbstractGraph,T,T}} where T<:Integer","page":"Home","title":"JGraph.has_edge","text":"has_edge(G::AbstractGraph, u::T, v::T)\n\nTest if egde(u,v) exist in the graph G.\n\n\n\n\n\n","category":"method"}]
}
